// Generated by gencpp from file synthetic_task_generator/SyntheticTaskMsg.msg
// DO NOT EDIT!


#ifndef SYNTHETIC_TASK_GENERATOR_MESSAGE_SYNTHETICTASKMSG_H
#define SYNTHETIC_TASK_GENERATOR_MESSAGE_SYNTHETICTASKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace synthetic_task_generator
{
template <class ContainerAllocator>
struct SyntheticTaskMsg_
{
  typedef SyntheticTaskMsg_<ContainerAllocator> Type;

  SyntheticTaskMsg_()
    : instance(0)
    , value(0.0)  {
    }
  SyntheticTaskMsg_(const ContainerAllocator& _alloc)
    : instance(0)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _instance_type;
  _instance_type instance;

   typedef double _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SyntheticTaskMsg_

typedef ::synthetic_task_generator::SyntheticTaskMsg_<std::allocator<void> > SyntheticTaskMsg;

typedef boost::shared_ptr< ::synthetic_task_generator::SyntheticTaskMsg > SyntheticTaskMsgPtr;
typedef boost::shared_ptr< ::synthetic_task_generator::SyntheticTaskMsg const> SyntheticTaskMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator1> & lhs, const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator2> & rhs)
{
  return lhs.instance == rhs.instance &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator1> & lhs, const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace synthetic_task_generator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbfe4c158f332960f1182cd0ed832cbc";
  }

  static const char* value(const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbfe4c158f332960ULL;
  static const uint64_t static_value2 = 0xf1182cd0ed832cbcULL;
};

template<class ContainerAllocator>
struct DataType< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "synthetic_task_generator/SyntheticTaskMsg";
  }

  static const char* value(const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 instance\n"
"float64 value\n"
;
  }

  static const char* value(const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.instance);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyntheticTaskMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::synthetic_task_generator::SyntheticTaskMsg_<ContainerAllocator>& v)
  {
    s << indent << "instance: ";
    Printer<int64_t>::stream(s, indent + "  ", v.instance);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYNTHETIC_TASK_GENERATOR_MESSAGE_SYNTHETICTASKMSG_H
